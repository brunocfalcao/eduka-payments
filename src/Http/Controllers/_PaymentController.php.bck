<?php

namespace Eduka\Payments\Http\Controllers;

use App\Http\Controllers\Controller;
use Brunocfalcao\Cerebrus\Cerebrus;
use Brunocfalcao\Tokenizer\Models\Token;
use Eduka\Cube\Models\Course;
use Eduka\Cube\Models\Order;
use Eduka\Cube\Models\Variant;
use Eduka\Nereus\Facades\Nereus;
use Eduka\Payments\PaymentProviders\LemonSqueezy\LemonSqueezy;
use Eduka\Payments\PaymentProviders\LemonSqueezy\Responses\CreatedCheckoutResponse;
use Exception;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request as HttpRequest;

class PaymentController extends Controller
{
    private string $lemonSqueezyApiKey;

    private Course $course;

    private Variant $variant;

    private Cerebrus $session;

    private $request;

    public function __construct()
    {
        $this->lemonSqueezyApiKey = env('LEMON_SQUEEZY_API_KEY', '');
    }

    /**
     * Page been redirected after the payment checkout is completed.
     * Like a "thank you for buying my course" webpage.
     */
    public function thanksForBuying()
    {
        return view('course::thanks-for-buying');
    }

    /**
     * After we settle and verify the HTTP request that came from the
     * "buy course" button, we can then redirect to a new link (checkout)
     * that is part of the lemon squeezy checkout process.
     *
     * @return void
     */
    public function redirectToCheckoutPage(HttpRequest $request): RedirectResponse
    {
        $this->course = Nereus::course();
        $this->variant = Variant::firstWhere('uuid', $request->input('variant'));
        $paymentsApi = new LemonSqueezy($this->lemonSqueezyApiKey);

        if (! $this->course || ! $this->variant || ! $paymentsApi) {
            // No minimum data to continue. Abort.
            return redirect()->back();
        }

        // https://developers.cloudflare.com/fundamentals/reference/http-request-headers/
        $userCountry ??= request()->header('cf-ipcountry');

        // Contains all checkout custom information that is needed for eduka.
        $payload = [
            'variant' => $this->variant,
            'country' => $userCountry,
        ];

        $checkoutResponse = $this->createCheckout($paymentsApi, $payload);

        $checkoutUrl = (new CreatedCheckoutResponse($checkoutResponse))->checkoutUrl();

        return redirect()->away($checkoutUrl);
    }

    public function handleWebhook(HttpRequest $request)
    {
        $this->request = $request;

        /**
         * Controller itself will:
         * 1. Validate the token from the webhook payload.
         * 2. Add the order into the database.
         *
         * The remaining activities are called via the event
         * that will be triggered on the order.created
         * observer.
         */
        try {
            // Validates and burns token.
            $this->validateWebhookToken();

            // Verify if the variant id is part of our course variants.
            $this->validateLemonSqueezyVariantId();

            // Store the order and start the course assignment process.
            $this->storeOrder($request);

            // We can return ok. Any exception needs to be treated later.
            return response()->json();
        } catch (Exception $e) {
            return response()->json(['error' => $e->getMessage()], 500);
        }
    }

    protected function validateLemonSqueezyVariantId()
    {
        $customData = collect($this->request->all());
    }

    protected function validateWebhookToken()
    {
        $customData = collect($this->request->all());

        $token = data_get('meta.custom_data.token', $customData);

        if (! $token || ! Token::isValid($token)) {
            throw new Exception('Invalid token. Your IP was blacklisted2');
        }

        // Burn token so it cannot be used again.
        Token::burn($token);
    }

    protected function storeOrder()
    {
        $payload = $this->request->all();

        // Columns to array paths (data_get) mappings.
        // Except response_body.
        $mapping = [
            'event_name' => 'meta.event_name',
            'custom_data' => 'meta.custom_data',
            'store_id' => 'data.attributes.store_id',
            'customer_id' => 'data.attributes.store_id',
            'order_number' => 'data.attributes.order_number',
            'user_name' => 'data.attributes.user_name',
            'user_email' => 'data.attributes.user_email',
            'subtotal_usd' => 'data.attributes.subtotal_usd',
            'discount_total_usd' => 'data.attributes.discount_total_usd',
            'tax_usd' => 'data.attributes.tax_usd',
            'total_usd' => 'data.attributes.total_usd',
            'tax_name' => 'data.attributes.tax_name',
            'status' => 'data.attributes.status',
            'refunded' => 'data.attributes.refunded',
            'refunded_at' => 'data.attributes.refunded_at',
            'order_id' => 'data.attributes.first_order_item.order_id',
            'lemon_squeezy_product_id' => 'data.attributes.first_order_item.product_id',
            'lemon_squeezy_variant_id' => 'data.attributes.first_order_item.variant_id',
            'lemon_squeezy_product_name' => 'data.attributes.first_order_item.product_name',
            'lemon_squeezy_variant_name' => 'data.attributes.first_order_item.variant_name',
            'price' => 'data.attributes.first_order_item.price',
            'receipt' => 'data.attributes.urls.receipt',
        ];

        $data = [];

        foreach ($mapping as $column => $webhookAttribute) {
            $data[$column] = data_get($payload, $webhookAttribute);
        }

        $data['response_body'] = $this->request->all();

        Order::create($data);
    }

    protected function createCheckout(LemonSqueezy $paymentsApi, array $payload): array
    {
        try {
            $responseString = $paymentsApi
                ->setRedirectUrl(route('purchase.callback', Token::createToken()->token))
                ->setExpiresAt(now()->addHours(2)->toString())
                ->setCustomData([
                    'token' => Token::createToken()->token,
                ]);

            // Conditionally applying setCustomPrice.
            if ($variant->lemon_squeezy_price_override) {
                $responseString = $responseString
                    ->setCustomPrice(
                        $variant->lemon_squeezy_price_override * 100
                    );
            }

            // Eager load the course.
            $variant = Variant::with('course')->find($variant->id);

            $responseString = $responseString
                ->setStoreId($variant->course->lemon_squeezy_store_id)
                ->setVariantId($variant->lemon_squeezy_variant_id)
                ->createCheckout();

            $raw = json_decode($responseString, true);

            if (isset($raw['errors'])) {
                throw new Exception(reset($raw['errors'][0]));
            }

            return $raw;
        } catch (Exception $e) {
            throw new Exception('could not create checkout - '.$e->getMessage());
        }
    }
}
